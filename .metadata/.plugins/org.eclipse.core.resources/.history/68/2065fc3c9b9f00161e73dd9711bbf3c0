package kierros2
import scala.collection.mutable.ArrayBuffer


object AudioEffects extends App {
  
  val s: Int = 44100
  
  def removeVocals(sound: StereoSound) : StereoSound = {
    val soundData = ArrayBuffer[Int]()
            
    for(i <- 0 until sound.left.size){
      soundData += (sound.left(i) - sound.right(i)) / 2
    }
        
    new StereoSound("vocalsRemoved", soundData, soundData)
  }
  
  def fadeIn(sound: StereoSound, fadeLen: Int) = {
    
    if(sound.length > fadeLen){   
      val multiplyBy = 1.00 / fadeLen
      var multiL: Double = 0
      var multiR: Double = 0
  
      val soundDataL = ArrayBuffer[Int]()
      val soundDataR = ArrayBuffer[Int]()
      
      for(i <- sound.left){
        soundDataL += (i * multiL).toInt
        multiL += multiplyBy
      }
      
      for(i <- sound.right){
        soundDataR += (i * multiplR).toInt
      }
      
      new StereoSound("Faded", soundDataL, soundDataR)
      
    } else {
      new StereoSound("noFade", sound.left, sound.right) 
      println("Method fadeIn did not succeed...")
    }
    
  }
  
  
}
  

