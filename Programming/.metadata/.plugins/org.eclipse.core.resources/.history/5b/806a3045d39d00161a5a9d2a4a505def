package o1.auctionhouse

import scala.collection.mutable.Buffer


/** The class `AuctionHouse` represents electronic auction houses. It provides methods for 
  * adding auctions and producing statistics about the items being sold, among other things.
  *
  * This version of class `AuctionHouse` can only handle English-style auctions (of type 
  * `EnglishAuction`). Other ways of selling items are not supported.
  *
  * @param name  the name of the auction house */
class AuctionHouse(val name: String) {
  
  private val items = Buffer[ItemForSale]()  // container for the items being sold

  def addItem(item: EnglishAuction): Unit = {
    this.items += item
  }

  def removeItem(item: EnglishAuction): Unit = {
    this.items -= item
  }

  override def toString = if (this.items.isEmpty) this.name else this.name + ":\n" + this.items.mkString("\n")

  def nextDay() = {
    for (current <- this.items) {
      current.advanceOneDay()
    }
  }
  

  def totalPrice = {
    var totalSoFar = 0
    for (current <- this.items) {
      totalSoFar += current.price
    }
    totalSoFar
  }

  def averagePrice = this.totalPrice.toDouble / this.items.size

  def numberOfOpenItems = {
    var openCount = 0
    for (current <- this.items) {
      if (current.isOpen) {
        openCount += 1
      }
    }
    openCount
  }

    if (this.items.isEmpty) {
      None 
    } else {
      var priciestSoFar = this.items(0) 
      for (current <- this.items) {  
        if (current.price > priciestSoFar.price) {
          priciestSoFar = current
        }
      }
      Some(priciestSoFar)
    }
  }

  def purchasesOf(buyer: String) = {
    val purchases = Buffer[EnglishAuction]()
    for (current <- this.items) {
      if (current.buyer == Some(buyer)) {
        purchases += current
      }
    }
    purchases
  }
  
  
}

