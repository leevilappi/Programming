package o1.auctionhouse
	
import scala.math._
	
class EnglishAuction(description: String, val startingPrice: Int, duration: Int) extends ItemForSale(description:String){
	
	  private var highestBid = new Bid(None, startingPrice)       // most-wanted holder
	  private var secondHighestBid = new Bid(None, startingPrice) // most-wanted holder
	  private var remainingDays = duration                            // stepper
	  
	  
	  def advanceOneDay() = {
	    if (this.isOpen) {
	      this.remainingDays -= 1
	    }
	  }
	 
	  def bid(bidder: String, amount: Int) = {
	    val newBid = new Bid(Some(bidder), amount)
	    if (this.isOpen) {
	      if (newBid.beats(this.highestBid)) {
	        this.secondHighestBid = this.highestBid
	        this.highestBid = newBid
	        true
	      } else if (newBid.beats(this.secondHighestBid)) {
	        this.secondHighestBid = newBid
	        true
	      }
	    } 
	    false
	  }
	  
	  def buyer = this.highestBid.bidder
	  
	  def daysLeft = this.remainingDays
	  
	  def isExpired = !this.isOpen && this.highestBid.isInitialBid
	  
	  def isOpen = this.remainingDays > 0 
	
	  	  
	  def price = 
	    if (this.secondHighestBid.isInitialBid) 
	      this.startingPrice 
	    else 
	      min(this.secondHighestBid.limit + 1, this.highestBid.limit) 
		  
	  def requiredBid = if (this.highestBid.isInitialBid) this.startingPrice else this.price + 1
	    

	  
	
	  
	}